<!DOCTYPE html>
<html lang="en">
	<head>
		<title>日本与北京的自由转动</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>

			/*处理ios 长按自带拷贝等效果*/
			*{
				-webkit-touch-callout:none;

				-webkit-user-select:none;

				-khtml-user-select:none;

				-moz-user-select:none;

				-ms-user-select:none;

				user-select:none;

				-o-user-select:none;
			}
				body {
				color: #808080;
				font-family:Monospace;
				font-size:13px;
				text-align:center;

				background-color: #ffffff;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
			}

			a {

				color: #0080ff;
			}
			
			#bj{position: absolute;
				top: 10px; left:20px; width: 200px; height:20px; background-color:red; color:white;
				padding: 5px;}
				
			#tokyo{position: absolute;
				top: 80px; left:20px; width: 200px; height:20px; background-color:red; color:white;
				padding: 5px;}

			#button{
				width:100px;
				height:100px;
				border-radius: 100px;
				text-align: center;
				line-height: 100px;
				font-size: 20px;
				position: absolute;
				border:1px solid red;
				left: 50%;
				margin-left:-50px;
				bottom: 100px; 
				z-index: 111;
				user-select: none;
			}
			.video-box{
				position: absolute;
				left: 0;
				top:0;
				width:100%;
				height: 100%;
				z-index: -1;
			}
			.video {
				position: relative;
				display: block;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: #000;
			}
			#sight{
				width:68px;
				height:68px;
				position: absolute;
				left:50%;
				top:50%;
				transform: translate(-50%,-50%);
				background: url(./images/sight.png);
				background-size: 100%;
				z-index: 999;
			}
				
			#sd0,#sd1,#sd2{
				width: 20px;
				height: 20px;
				background: yellow;
				position: absolute;
				left: 0;
				top:0;
			}
		</style>
<!-- 		<script src="./eruda.js"></script>
		<script>eruda.init();</script>  -->
	</head>
	<body>


		<div id="container"></div>

		<div id="button">长按</div>

		<div id="frame"></div>

		<div id="sight"></div>
		
		<div id="sd0">	</div>
		<div id="sd1">	</div>
		<div id="sd2">	</div>

		<canvas id="canvas" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;z-index: -1;"></canvas>

		<div class="video-box">
			<video class="video" src="http://192.168.1.106:3002/video.mp4" preload="true" x-webkit-airplay="true"  webkit-playsinline  playsinline="true" class="c-videoSprite__video" style="display: none"  preload="true" autoplay="false"   id="video" ></video>
		</div>

		<script src="js/three.js"></script>
		<script type="text/javascript" src="js/createjs-2015.11.26.min.js"></script>
		<script src="js/renderers/CanvasRenderer.js"></script>
		<script src="js/renderers/Projector.js"></script>
		<script type="text/javascript" src="js/jquery.min.js"></script>
		<script src="js/TweenMax.min1.16.1.js"></script>
		<script src="js/libs/stats.min.js"></script>
		<script type="text/javascript" src="https://res.wx.qq.com/open/js/jweixin-1.2.0.js"></script>
		<script src="js/line.js"></script>
		<!-- <script type="text/javascript" src="js/main.js"></script> -->


   <script>
   	var hasTouch = 'ontouchstart' in window,
    startEvent = hasTouch ? 'touchstart' : 'mousedown',
    moveEvent = hasTouch ? 'touchmove' : 'mousemove',
    endEvent = hasTouch ? 'touchend' : 'mouseup',
    cancelEvent = hasTouch ? 'touchcancel' : 'mouseup';
    var width  = window.innerWidth,height = window.innerHeight;
       
    var bj=true;
    var tokyo=false;
    var zIndexState=false;
    var upState=false;
    var mouseX, mouseY, isMove = false;
    var videoState=true;

    document.addEventListener('WeixinJSBridgeReady',function(){  
        $("#video")[0].play();
        $("#video")[0].pause();
    },false);


	$(function(){
			$('body').css({'position':'fixed',"width":"100%"});


		document.oncontextmenu=function(e){
		    //或者return false;
		    e.preventDefault();
		};

		//body操作
		$("body").on(startEvent,function(e){
			 // e.preventDefault();
			  isMove = true;
			  e=hasTouch?e.originalEvent.touches[0]:e;

			  mouseX = e.pageX;
			  mouseY = e.pageY;
		}).on(moveEvent,function(e){
		    e.preventDefault();  
			

			e=hasTouch?e.originalEvent.touches[0]:e;				  

			if (isMove) {
			    var x = e.pageX;
			    var y = e.pageY;
			    var _x = x - mouseX;
			    var _y = y - mouseY;

				if(sphere.rotation.x+_y * 0.001 * Math.PI<=1.5 && sphere.rotation.x+_y * 0.001 * Math.PI>=-1.5){
					sphere.rotation.x += (_y) * 0.001 * Math.PI;
				}
				sphere.rotation.y += (_x)* 0.001 * Math.PI;
			
			    mouseX = x;
			    mouseY = y;
			  }		
		}).on(endEvent,function(){
			 // e.preventDefault();
		  isMove = false;
		})

		//按钮点击
		$("#button").on(startEvent,function(){
			upState=true;
			if(bj){
				tweenAnimation(beijing_ball);
				bj=false;
			}
		}).on(moveEvent,function(e){
			e.preventDefault();
			if(upState){
				zIndexState=true;
			}
		}).on(endEvent,function(){
			upState=false;
			zIndexState=false;

			setTimeout(function(){
				videoState=true;
				console.log("视频结束");
				$("#video")[0].pause();
				$("#video")[0].style.display="none";
			},100)
		})
		
	   	var scale = 750/1206;
		var imgs=[],imgsIndex=0;
		var frameAnGoState=true;	

		//帧动画
		+function(){
			var loader = new createjs.LoadQueue();
			var manifest =[
				"./images/frame/1.jpg",
				"./images/frame/2.jpg",
				"./images/frame/3.jpg",
				"./images/frame/4.jpg",
				"./images/frame/5.jpg",
				"./images/frame/6.jpg",
				"./images/frame/7.jpg",
				"./images/frame/8.jpg",
				"./images/frame/9.jpg",
				"./images/frame/10.jpg",
				"./images/frame/11.jpg",
				"./images/frame/12.jpg",
				"./images/frame/13.jpg",
			];
			mLength=manifest.length;
			//加载完成
			loader.on("complete", handleComplete, this);
			//加载完一个执行
			loader.on("fileload", fileloadHandler, this);
			// loader.on("progress", progressHandler, this);
			//放入加载列表
			loader.loadManifest(manifest);

			
			function fileloadHandler(e){
				imgs[imgsIndex]=e.result;
				imgsIndex++;
			}

			//加载完成
			function handleComplete(){
			}
		}()

		//帧动画
		function frameAnimation(e,callback){
			var canvas;
			var stage;
			var count =1;
			
			var speed=4;
			var add=0;

			$canvas=$("<canvas></canvas>");
			$canvas.css({
				"width":width+"px",
				"height":height+"px",
			})

			$canvas.attr({
				width:width*2+"px",
				height:height*2+"px",
			})

			$canvas.appendTo($("#frame"));
			canvas = $canvas[0];

			if(width/height>=scale){
				imgScale=width/375;
			}else{
				imgScale=height/603;
			}

			console.log(imgScale);
			stage = new createjs.Stage(canvas);

			bitmap = new createjs.Bitmap();
			bitmap.x=0;
			bitmap.y=0;
			bitmap.scaleX=imgScale;
			bitmap.scaleY=imgScale;
			bitmap.image=imgs[0];

			stage.addChild(bitmap);

			var state=true;
			var fristState=true;
			createjs.Ticker.framerate = 24;
			createjs.Ticker.addEventListener("tick",function(event){
					
					if(frameAnGoState){
						count++;
					}else{
						count--;
					}

					bitmap.image=imgs[count];

					if(count>=12){	
						count=12;

						if(videoState){
							$("#video")[0].currentTime=2;
							$("#video")[0].style.display="block";
							$("#video")[0].play();
							videoState=false;
							console.log("视频播放");
						}

					}else if(count<=0){
						addFrameState=true;
						frameAnGoState=true;
						count=0;
						$("#frame").find("canvas").remove();
						createjs.Ticker.removeAllEventListeners("tick");
						webglEl.style.display="block";
					}

					stage.update(event);
			});

		}


		var word={
			"beijing":{x:116.402198,y:39.873649},
			"riben":{x:135.976866,y:35.266135},
			"default":{x:-110.212969,y:-10.374006},
			"wb":{x: -97.335836,y:0.004623}
		};

		var t={0:"beijing",1:"riben",2:"wb"};


		//球体动画
		var webglEl = document.getElementById('container');
		var radius   = 0.5,segments = 32,rotation = 6;  
		var scene = new THREE.Scene();
		var camera = new THREE.PerspectiveCamera(70, width / height, 0.01, 1000);
		camera.position.z = 1.5;

		var s=getPosition(116.46, 39.92, 0.01);
		var renderer = new THREE.WebGLRenderer({ alpha: true });
		// renderer.setClearColor( 0x000000, 0 );
		renderer.setSize(width, height);

		scene.add(new THREE.AmbientLight(0x333333));

		//ss:经纬度 对应x,y值  lineArray:点 数组  
		var ss,lineArray=[];
		var resultArr=[];
		var sdIndex=0;
		var rotateStart=new THREE.Vector3(0,0,0.2);
		var animaTime=0.005;

		+function(){

			var light = new THREE.DirectionalLight(0xffffff, 1);
			light.position.set(5,3,5);
			scene.add(light);
			
			var light2 = new THREE.DirectionalLight(0xffffff, 1);
			light2.position.set(-5,6,-15);
			scene.add(light2);

			var beijing=getPosition(word.beijing.x,word.beijing.y, 0.01);
			var riben=getPosition(word.riben.x,word.riben.y,0.01);
			var wb=getPosition(word.wb.x,word.wb.y,0.01);

		    sphere = createSphere(radius, segments);
			scene.add(sphere)

			label=createSpriteShape("北京")
			label.position.set(beijing.x, beijing.y, beijing.z)
			sphere.add( label );
			lineArray.push(label);

			console.log(label);

			rlabel=createSpriteShape("日本")
			rlabel.position.set(riben.x, riben.y, riben.z)
			sphere.add( rlabel );
			lineArray.push(rlabel);


			wlabel=createSpriteShape("wb")
			wlabel.position.set(wb.x, wb.y, wb.z)
			sphere.add( wlabel );
			lineArray.push(wlabel);


			var world_vector = sphere.localToWorld(label.position.clone()); 
			// var vector = world_vector.project(sphere); 


			ss=hh(word[t[sdIndex]]);

			console.log(t[sdIndex]);

			sphere.rotation.y =ss.x;
			sphere.rotation.x =ss.y; 
			
			beijing_ball = createSphere(0.01, segments);//代表北京的小球
				
			tokyo_ball = createSphere(0.01, segments);//代表东京的小球  //东京的地理坐标是: 经度:139.46 纬度:35.42
		        var p2=getPosition(139.46,35.42,0.01)
				tokyo_ball.position.set(p2.x, p2.y, p2.z)
				// sphere.add( tokyo_ball );

			webglEl.appendChild(renderer.domElement);
			render();

		}()




		//转动定位  x,y 定位
		function hh(o){
			var area=getPosition(o.x, o.y, 0);
			
			var rotateStart=new THREE.Vector3(0,0,0.2); //三维向量

			var rotateEnd=new THREE.Vector3(area.x,0,area.z); //三维向量
			
			var rotateEnd2=new THREE.Vector3(area.x,area.y,area.z); //三维向量

			var angle1 = Math.acos(rotateStart.dot(rotateEnd) / rotateStart.length() / rotateEnd.length());

			var angle2 = Math.acos(rotateEnd.dot(rotateEnd2) / rotateEnd.length() / rotateEnd2.length());

			return {x:(180/Math.PI*angle1)*Math.PI*0.5/180*2+0.025,y:(180/Math.PI*angle2)*Math.PI*0.5/180*2+0.02} 

		}

		function hh2(o){
			var area=getPosition(o.x,o.y,o.z);
			
			var rotateStart=new THREE.Vector3(0,0,0); //三维向量

			var x=new THREE.Vector3(area.x,0,0); //三维向量
			
			var y=new THREE.Vector3(area.x,area.y,0); //三维向量

			return {x:x.length(),y:y.length()} 

		}



		var rotate_angle=0;
		var rotate_angle2=0;
		var addFrameState=true;

		function render() {
			requestAnimationFrame(render);
			renderer.render(scene, camera);

			if(!zIndexState){
				// sphere.rotation.y+=0.001;
			}

			if(zIndexState){
				if(sphere.position.z>=1){

					// console.log(addFrameState);
					//判断是否添加过帧动画
					if(addFrameState){
						console.log(3333);
						webglEl.style.display="none";
						frameAnimation();
						addFrameState=false;
					}					
				}else{
					sphere.position.z+=0.02;
				}
			}else{
				if($("#frame").find("canvas").length>0){
					frameAnGoState=false;

				}else{
				
					if(sphere.position.z>=0){
						sphere.position.z-=0.02;
					}
				}


			}

			sdIndex=docUpdate();
		}

		function docUpdate(){

			var resultArr=[];
			for(var i=0;i<lineArray.length;i++){
				// console.log(lineArray[i].position.clone);
				var world_vector = sphere.localToWorld(lineArray[i].position.clone()); 
				var vector = world_vector.project(camera);  

				// console.log(rotateStart);
				var world_vector2 = sphere.localToWorld(rotateStart.clone()); 
				var vector2 = world_vector2.project(camera);  

				var halfWidth = window.innerWidth / 2;  
				var halfHeight = window.innerHeight / 2;  
				 
				 // console.log(lineArray[i])
				var result = {
				x: Math.round(vector.x * halfWidth + halfWidth),
				y: Math.round(-vector.y * halfHeight + halfHeight)};
				
				document.getElementById("sd"+i).style.left=(result.x)+"px"
				document.getElementById("sd"+i).style.top=(result.y)+"px"		
				$("#sd"+i).attr({
					"data-x":vector.x,
					"data-y":vector.y,
					"data-z":vector.z
				});
				// if(vector.y>=0){

				// }		

                // var x = vector.x - vector2.x;

                // var y = vector.y - vector2.y;

                // var z = vector.z - vector2.z;

                // var result = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
                // 
                var s=hh2(vector);
                // console.log(s.x,s.y,s.z);
                // console.log(vector);
                // console.log(s.x,s.y);
                var result = Math.sqrt(Math.pow(Math.abs(s.x), 2) + Math.pow(Math.abs(s.y), 2));
                
                // console.log(result-2.092);
                resultArr.push(result);


			}
			// console.log(resultArr);

			var index = resultArr.indexOf(Math.min.apply(Math, resultArr));

			// console.log("ssss");
			animaTime=resultArr[index];
            return index;
		}

		function tweenAnimation( target){ //target is beijing_ball or tokyo_ball

			ss=hh(word[t[sdIndex]]);

				var worldP1=sphere.localToWorld(target.position.clone())//Vector3, 得到小球在世界坐标系里的位置 

				var rotateStart1=camera.position//new THREE.Vector3(0,0,1.5);
				var rotateEnd1=worldP1.clone()
				var angle1 = Math.acos(rotateStart1.dot(rotateEnd1) / rotateStart1.length() / rotateEnd1.length());// 小球与摄像机之间的夹角

				var axis1= new THREE.Vector3()
				 axis1.crossVectors(rotateStart1, rotateEnd1).normalize(); ////rotateStart,rotateEnd向量乘积 标准化 得到旋转轴, 所谓旋转轴就是垂直于rotateStart, rotateEnd这两条线所构成的平面的直线 
				//rotateAroundWorldAxis(sphere, axis1,(2*Math.PI-angle1))
				var obj={a:0,b:0}
				var targetAngle=(angle1>Math.PI)?(2*Math.PI-angle1):-angle1// 最终应该转动的弧度数

				console.log(Math.abs((animaTime-2.0933)*100));
				var time=Math.abs((animaTime-2.0933)*100+0.1);
				var tween = TweenLite.to(sphere.rotation,time, {
					x:ss.y,
					y:ss.x,
					onComplete:function(){
						bj=true;
						// console.log(upState,sphere.position.z);
						if(upState){
							zIndexState=true;
						}
					}
				});

				// var tween2 = new TimelineLite();
				// tween2.to(sphere.position, time, {
				// 	z:"0.5",
				// 	}).to(sphere.position,0.5,{
				// 	z:"0",
				// 	onComplete:function(){
				// 		bj=true;
				// 		// console.log(upState,sphere.position.z);
				// 		if(upState){
				// 			zIndexState=true;
				// 		}
				// 	}

				// 	});

		}


		function createSphere(radius, segments) {
			return new THREE.Mesh(
				new THREE.SphereGeometry(radius, segments, segments),
				new THREE.MeshPhongMaterial({
					map:         THREE.ImageUtils.loadTexture('images/2_no_clouds_4k.jpg'),
					bumpMap:     THREE.ImageUtils.loadTexture('images/elev_bump_4k.jpg'),
					bumpScale:   0.005,
					specularMap: THREE.ImageUtils.loadTexture('images/water_4k.png'),
					// specular:    new THREE.Color('grey')								
				})
			);
		}

		function createClouds(radius, segments) {
			return new THREE.Mesh(
				new THREE.SphereGeometry(radius + 0.003, segments, segments),			
				new THREE.MeshPhongMaterial({
					map:         THREE.ImageUtils.loadTexture('images/fair_clouds_4k.png'),
					transparent: true
				})
			);		
		}

		function createStars(radius, segments) {
			return new THREE.Mesh(
				new THREE.SphereGeometry(radius, segments, segments), 
				new THREE.MeshBasicMaterial({
					map:  THREE.ImageUtils.loadTexture('images/galaxy_starfield.png'), 
					side: THREE.BackSide
				})
			);
		}
		
		function createSpriteShape(text){
	       /*1、创建一个画布，记得设置画布的宽高，否则将使用默认宽高，有可能会导致图像显示变形*/

	        var canvas = document.createElement("canvas");
	        canvas.width = 120;
	        canvas.height = 120;
	        // 2、创建图形，这部分可以去看w3c canvas教程
	        var ctx = canvas.getContext("2d");
	        ctx.fillStyle = "#eee";
	        ctx.arc(50,50,10,0,2*Math.PI);
	        ctx.fill();

	        ctx.fillText(text,40,30);


	        /*3、将canvas作为纹理，创建Sprite*/
	        var texture = new THREE.Texture(canvas);
	        texture.needsUpdate = true; //注意这句不能少
	        var material = new THREE.SpriteMaterial({map:texture});
	        var mesh = new THREE.Sprite(material);
	        /*4、放大图片，每个精灵有自己的大小，默认情况下都是很小的，如果你不放大，基本是看不到的*/
	        mesh.scale.set(0.1,0.1,1);
	        return mesh;
		}



		// 获取position ---把经度纬度转化为三维空间的xyz
	    function getPosition(lng, lat, alt) {//alt是地球几何体半径基础上多出的径向距离
	        var phi = (90-lat)*(Math.PI/180),
	            theta = (lng+180)*(Math.PI/180),
	            radius = alt+0.5, //earth radius is 0.5
	            x = -(radius * Math.sin(phi) * Math.cos(theta)),
	            z = (radius * Math.sin(phi) * Math.sin(theta)),
	            rx =(lat/360)*(Math.PI*2*radius*2),
				ry =(lng/360)*(Math.PI*2*radius*2),
	            y = (radius * Math.cos(phi));

	        return {x: x, y: y, z: z,ry:ry,rx:rx};
	    }
		
		 
	  
	    function rotateAroundWorldAxis(object, axis, radians) {

		   //四维矩阵
		   var rotWorldMatrix = new THREE.Matrix4();

			//axis — 被正规化的旋转轴。 theta — 旋转弧度。  设置此矩阵为绕axis轴旋转theta弧度的旋转变换。
			rotWorldMatrix.makeRotationAxis(axis.normalize(), radians);
			//使用m右乘以（Post-multiplies）该矩阵。
			rotWorldMatrix.multiply(object.matrix);                // pre-multiply
			object.matrix = rotWorldMatrix;

			console.log(object.matrix);
			object.rotation.setFromRotationMatrix(object.matrix);

		}

		})





		</script>

	</body>
</html>
